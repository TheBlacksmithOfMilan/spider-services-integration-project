let express = require('express');let router = express.Router();const UserService = require('../../services/user_service.js');const SubscriptionService = require('../../services/subscriptions_service');const logger = require('../../utils/loggers/logger');const HTTPReqParamError = require('../../errors/http_request_param_error');const auth = require('../../middlewares/auth');const apiRes = require('../../utils/api_response');//! routers in this module is under '/api/user' path//  提交用户注册数据router.post('/', async (req, res, next) => {  try {    const {name, username, password} = req.body;    const {newUser, token} = await UserService.addNewUsers({name, username, password});    req.data = {userFound: newUser, token};    apiRes(req, res);  } catch (e) {    next(e);  }});// 用户登陆页面router.get('/login', (req, res) => {  res.render('login');});// 提交用户登录数据router.post('/login', async (req, res, next) => {  (async () => {    // console.log(1)    const {username, password} = req.body;    // result = {token, userFound}    const result = await UserService.loginWithNamePwd({username, password});    // console.log(2)    console.log('result: ', result);    return result;  })()    .then(      result => {        console.log('result: ', result);        req.data = result;        apiRes(req, res);      })    .catch(      e => {        next(e);      },    );});router.get('/:userId', async (req, res, next) => {  (async () => {    let userId = req.params.userId;    if (userId.length < 5) {      throw new HTTPReqParamError('userId', '用户id不能为空');    } else {      console.log('userId.length > 5');      let user = await UserService.getUserById(userId);      req.data = {userFound: user};      apiRes(req, res);    }  })()    .then()    .catch((e) => {      console.log('error is catched');      next(e);    });});router.route('/:userId/subscription')// create user subscription  .post(auth, async (req, res) => {    const {userId} = req.params;    const {type: subscriptionType, sourceId} = req.body;    //createSubscription(userId, subscriptionType, sourceId) {    let newSub = await SubscriptionService.createSubscription(      req.user._id,      subscriptionType,      sourceId,    );    console.log('newSub :', newSub);    // subscription is supposed to be an Array    res.render('Sub', {subscription: [newSub]});  })  // fetch user subscription  .get(auth, async (req, res, next) => {    try {      let subscriptions = await UserService.getSubscription(req.user._id);      req.data = {sub: subscriptions};      apiRes(req, res);    } catch (err) {      next(err);    }  });// get users subscribed contentrouter.get('/:userId/subContent', auth, async (req, res, next) => {  try {    const {userId} = req.params;    let page = Number(req.query.page) || 0;    let pageSize = Number(req.query.pageSize) || 10;    // getSpiderServiceContents(userId, page = 0, pageSize = 10)    const fetchedData = await SubscriptionService.getSpiderServiceContents(req.user._id, page, pageSize)      .catch(err => {        logger('error', 'error during fetching user subscribed content: %s', err.message, err.stack);      });// {contents, totalAmount: amount, page, pageSize}    req.data = {...fetchedData};    apiRes(req, res);  } catch (err) {    next(err);  }});module.exports = router;